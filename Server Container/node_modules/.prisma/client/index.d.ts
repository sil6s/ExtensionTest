
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  username: string
}

/**
 * Model Issue
 * 
 */
export type Issue = {
  id: string
  issueName: string
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionName: string
  userId: string
  issueId: string
  durations: number[]
}

/**
 * Model TimerData
 * 
 */
export type TimerData = {
  id: string
  userId: string
  issueId: string
  sessionId: string
  startTime: Date
  stopTime: Date | null
}

/**
 * Model UserIssueJoin
 * 
 */
export type UserIssueJoin = {
  id: string
  username: string
  issueName: string
  totalDuration: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): PrismaPromise<Prisma.JsonObject>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.issue`: Exposes CRUD operations for the **Issue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Issues
    * const issues = await prisma.issue.findMany()
    * ```
    */
  get issue(): Prisma.IssueDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.timerData`: Exposes CRUD operations for the **TimerData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimerData
    * const timerData = await prisma.timerData.findMany()
    * ```
    */
  get timerData(): Prisma.TimerDataDelegate<GlobalReject>;

  /**
   * `prisma.userIssueJoin`: Exposes CRUD operations for the **UserIssueJoin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserIssueJoins
    * const userIssueJoins = await prisma.userIssueJoin.findMany()
    * ```
    */
  get userIssueJoin(): Prisma.UserIssueJoinDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Issue: 'Issue',
    Session: 'Session',
    TimerData: 'TimerData',
    UserIssueJoin: 'UserIssueJoin'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sessions: number
    timerData: number
    userIssueJoins: number
  }

  export type UserCountOutputTypeSelect = {
    sessions?: boolean
    timerData?: boolean
    userIssueJoins?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type IssueCountOutputType
   */


  export type IssueCountOutputType = {
    sessions: number
    timerData: number
    userIssueJoins: number
  }

  export type IssueCountOutputTypeSelect = {
    sessions?: boolean
    timerData?: boolean
    userIssueJoins?: boolean
  }

  export type IssueCountOutputTypeGetPayload<
    S extends boolean | null | undefined | IssueCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? IssueCountOutputType
    : S extends undefined
    ? never
    : S extends IssueCountOutputTypeArgs
    ?'include' extends U
    ? IssueCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof IssueCountOutputType ? IssueCountOutputType[P] : never
  } 
    : IssueCountOutputType
  : IssueCountOutputType




  // Custom InputTypes

  /**
   * IssueCountOutputType without action
   */
  export type IssueCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the IssueCountOutputType
     * 
    **/
    select?: IssueCountOutputTypeSelect | null
  }



  /**
   * Count Type SessionCountOutputType
   */


  export type SessionCountOutputType = {
    timerData: number
  }

  export type SessionCountOutputTypeSelect = {
    timerData?: boolean
  }

  export type SessionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SessionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SessionCountOutputType
    : S extends undefined
    ? never
    : S extends SessionCountOutputTypeArgs
    ?'include' extends U
    ? SessionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SessionCountOutputType ? SessionCountOutputType[P] : never
  } 
    : SessionCountOutputType
  : SessionCountOutputType




  // Custom InputTypes

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     * 
    **/
    select?: SessionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    username: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    sessions?: boolean | SessionFindManyArgs
    timerData?: boolean | TimerDataFindManyArgs
    userIssueJoins?: boolean | UserIssueJoinFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    sessions?: boolean | SessionFindManyArgs
    timerData?: boolean | TimerDataFindManyArgs
    userIssueJoins?: boolean | UserIssueJoinFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'timerData' ? Array < TimerDataGetPayload<S['include'][P]>>  :
        P extends 'userIssueJoins' ? Array < UserIssueJoinGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'timerData' ? Array < TimerDataGetPayload<S['select'][P]>>  :
        P extends 'userIssueJoins' ? Array < UserIssueJoinGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    timerData<T extends TimerDataFindManyArgs = {}>(args?: Subset<T, TimerDataFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TimerData>>, PrismaPromise<Array<TimerDataGetPayload<T>>>>;

    userIssueJoins<T extends UserIssueJoinFindManyArgs = {}>(args?: Subset<T, UserIssueJoinFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserIssueJoin>>, PrismaPromise<Array<UserIssueJoinGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Issue
   */


  export type AggregateIssue = {
    _count: IssueCountAggregateOutputType | null
    _min: IssueMinAggregateOutputType | null
    _max: IssueMaxAggregateOutputType | null
  }

  export type IssueMinAggregateOutputType = {
    id: string | null
    issueName: string | null
  }

  export type IssueMaxAggregateOutputType = {
    id: string | null
    issueName: string | null
  }

  export type IssueCountAggregateOutputType = {
    id: number
    issueName: number
    _all: number
  }


  export type IssueMinAggregateInputType = {
    id?: true
    issueName?: true
  }

  export type IssueMaxAggregateInputType = {
    id?: true
    issueName?: true
  }

  export type IssueCountAggregateInputType = {
    id?: true
    issueName?: true
    _all?: true
  }

  export type IssueAggregateArgs = {
    /**
     * Filter which Issue to aggregate.
     * 
    **/
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     * 
    **/
    orderBy?: Enumerable<IssueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Issues
    **/
    _count?: true | IssueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IssueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IssueMaxAggregateInputType
  }

  export type GetIssueAggregateType<T extends IssueAggregateArgs> = {
        [P in keyof T & keyof AggregateIssue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIssue[P]>
      : GetScalarType<T[P], AggregateIssue[P]>
  }




  export type IssueGroupByArgs = {
    where?: IssueWhereInput
    orderBy?: Enumerable<IssueOrderByWithAggregationInput>
    by: Array<IssueScalarFieldEnum>
    having?: IssueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IssueCountAggregateInputType | true
    _min?: IssueMinAggregateInputType
    _max?: IssueMaxAggregateInputType
  }


  export type IssueGroupByOutputType = {
    id: string
    issueName: string
    _count: IssueCountAggregateOutputType | null
    _min: IssueMinAggregateOutputType | null
    _max: IssueMaxAggregateOutputType | null
  }

  type GetIssueGroupByPayload<T extends IssueGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IssueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IssueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IssueGroupByOutputType[P]>
            : GetScalarType<T[P], IssueGroupByOutputType[P]>
        }
      >
    >


  export type IssueSelect = {
    id?: boolean
    issueName?: boolean
    sessions?: boolean | SessionFindManyArgs
    timerData?: boolean | TimerDataFindManyArgs
    userIssueJoins?: boolean | UserIssueJoinFindManyArgs
    _count?: boolean | IssueCountOutputTypeArgs
  }

  export type IssueInclude = {
    sessions?: boolean | SessionFindManyArgs
    timerData?: boolean | TimerDataFindManyArgs
    userIssueJoins?: boolean | UserIssueJoinFindManyArgs
    _count?: boolean | IssueCountOutputTypeArgs
  }

  export type IssueGetPayload<
    S extends boolean | null | undefined | IssueArgs,
    U = keyof S
      > = S extends true
        ? Issue
    : S extends undefined
    ? never
    : S extends IssueArgs | IssueFindManyArgs
    ?'include' extends U
    ? Issue  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'timerData' ? Array < TimerDataGetPayload<S['include'][P]>>  :
        P extends 'userIssueJoins' ? Array < UserIssueJoinGetPayload<S['include'][P]>>  :
        P extends '_count' ? IssueCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'timerData' ? Array < TimerDataGetPayload<S['select'][P]>>  :
        P extends 'userIssueJoins' ? Array < UserIssueJoinGetPayload<S['select'][P]>>  :
        P extends '_count' ? IssueCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Issue ? Issue[P] : never
  } 
    : Issue
  : Issue


  type IssueCountArgs = Merge<
    Omit<IssueFindManyArgs, 'select' | 'include'> & {
      select?: IssueCountAggregateInputType | true
    }
  >

  export interface IssueDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Issue that matches the filter.
     * @param {IssueFindUniqueArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IssueFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IssueFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Issue'> extends True ? CheckSelect<T, Prisma__IssueClient<Issue>, Prisma__IssueClient<IssueGetPayload<T>>> : CheckSelect<T, Prisma__IssueClient<Issue | null >, Prisma__IssueClient<IssueGetPayload<T> | null >>

    /**
     * Find the first Issue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueFindFirstArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IssueFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IssueFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Issue'> extends True ? CheckSelect<T, Prisma__IssueClient<Issue>, Prisma__IssueClient<IssueGetPayload<T>>> : CheckSelect<T, Prisma__IssueClient<Issue | null >, Prisma__IssueClient<IssueGetPayload<T> | null >>

    /**
     * Find zero or more Issues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Issues
     * const issues = await prisma.issue.findMany()
     * 
     * // Get first 10 Issues
     * const issues = await prisma.issue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const issueWithIdOnly = await prisma.issue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IssueFindManyArgs>(
      args?: SelectSubset<T, IssueFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Issue>>, PrismaPromise<Array<IssueGetPayload<T>>>>

    /**
     * Create a Issue.
     * @param {IssueCreateArgs} args - Arguments to create a Issue.
     * @example
     * // Create one Issue
     * const Issue = await prisma.issue.create({
     *   data: {
     *     // ... data to create a Issue
     *   }
     * })
     * 
    **/
    create<T extends IssueCreateArgs>(
      args: SelectSubset<T, IssueCreateArgs>
    ): CheckSelect<T, Prisma__IssueClient<Issue>, Prisma__IssueClient<IssueGetPayload<T>>>

    /**
     * Create many Issues.
     *     @param {IssueCreateManyArgs} args - Arguments to create many Issues.
     *     @example
     *     // Create many Issues
     *     const issue = await prisma.issue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IssueCreateManyArgs>(
      args?: SelectSubset<T, IssueCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Issue.
     * @param {IssueDeleteArgs} args - Arguments to delete one Issue.
     * @example
     * // Delete one Issue
     * const Issue = await prisma.issue.delete({
     *   where: {
     *     // ... filter to delete one Issue
     *   }
     * })
     * 
    **/
    delete<T extends IssueDeleteArgs>(
      args: SelectSubset<T, IssueDeleteArgs>
    ): CheckSelect<T, Prisma__IssueClient<Issue>, Prisma__IssueClient<IssueGetPayload<T>>>

    /**
     * Update one Issue.
     * @param {IssueUpdateArgs} args - Arguments to update one Issue.
     * @example
     * // Update one Issue
     * const issue = await prisma.issue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IssueUpdateArgs>(
      args: SelectSubset<T, IssueUpdateArgs>
    ): CheckSelect<T, Prisma__IssueClient<Issue>, Prisma__IssueClient<IssueGetPayload<T>>>

    /**
     * Delete zero or more Issues.
     * @param {IssueDeleteManyArgs} args - Arguments to filter Issues to delete.
     * @example
     * // Delete a few Issues
     * const { count } = await prisma.issue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IssueDeleteManyArgs>(
      args?: SelectSubset<T, IssueDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Issues
     * const issue = await prisma.issue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IssueUpdateManyArgs>(
      args: SelectSubset<T, IssueUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Issue.
     * @param {IssueUpsertArgs} args - Arguments to update or create a Issue.
     * @example
     * // Update or create a Issue
     * const issue = await prisma.issue.upsert({
     *   create: {
     *     // ... data to create a Issue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Issue we want to update
     *   }
     * })
    **/
    upsert<T extends IssueUpsertArgs>(
      args: SelectSubset<T, IssueUpsertArgs>
    ): CheckSelect<T, Prisma__IssueClient<Issue>, Prisma__IssueClient<IssueGetPayload<T>>>

    /**
     * Find zero or more Issues that matches the filter.
     * @param {IssueFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const issue = await prisma.issue.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: IssueFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Issue.
     * @param {IssueAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const issue = await prisma.issue.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: IssueAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of Issues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueCountArgs} args - Arguments to filter Issues to count.
     * @example
     * // Count the number of Issues
     * const count = await prisma.issue.count({
     *   where: {
     *     // ... the filter for the Issues we want to count
     *   }
     * })
    **/
    count<T extends IssueCountArgs>(
      args?: Subset<T, IssueCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IssueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Issue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IssueAggregateArgs>(args: Subset<T, IssueAggregateArgs>): PrismaPromise<GetIssueAggregateType<T>>

    /**
     * Group by Issue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IssueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IssueGroupByArgs['orderBy'] }
        : { orderBy?: IssueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IssueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssueGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Issue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IssueClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    timerData<T extends TimerDataFindManyArgs = {}>(args?: Subset<T, TimerDataFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TimerData>>, PrismaPromise<Array<TimerDataGetPayload<T>>>>;

    userIssueJoins<T extends UserIssueJoinFindManyArgs = {}>(args?: Subset<T, UserIssueJoinFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserIssueJoin>>, PrismaPromise<Array<UserIssueJoinGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Issue findUnique
   */
  export type IssueFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * Throw an Error if a Issue can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Issue to fetch.
     * 
    **/
    where: IssueWhereUniqueInput
  }


  /**
   * Issue findFirst
   */
  export type IssueFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * Throw an Error if a Issue can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Issue to fetch.
     * 
    **/
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     * 
    **/
    orderBy?: Enumerable<IssueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Issues.
     * 
    **/
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Issues.
     * 
    **/
    distinct?: Enumerable<IssueScalarFieldEnum>
  }


  /**
   * Issue findMany
   */
  export type IssueFindManyArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * Filter, which Issues to fetch.
     * 
    **/
    where?: IssueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Issues to fetch.
     * 
    **/
    orderBy?: Enumerable<IssueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Issues.
     * 
    **/
    cursor?: IssueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Issues from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Issues.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IssueScalarFieldEnum>
  }


  /**
   * Issue create
   */
  export type IssueCreateArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * The data needed to create a Issue.
     * 
    **/
    data: XOR<IssueCreateInput, IssueUncheckedCreateInput>
  }


  /**
   * Issue createMany
   */
  export type IssueCreateManyArgs = {
    /**
     * The data used to create many Issues.
     * 
    **/
    data: Enumerable<IssueCreateManyInput>
  }


  /**
   * Issue update
   */
  export type IssueUpdateArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * The data needed to update a Issue.
     * 
    **/
    data: XOR<IssueUpdateInput, IssueUncheckedUpdateInput>
    /**
     * Choose, which Issue to update.
     * 
    **/
    where: IssueWhereUniqueInput
  }


  /**
   * Issue updateMany
   */
  export type IssueUpdateManyArgs = {
    /**
     * The data used to update Issues.
     * 
    **/
    data: XOR<IssueUpdateManyMutationInput, IssueUncheckedUpdateManyInput>
    /**
     * Filter which Issues to update
     * 
    **/
    where?: IssueWhereInput
  }


  /**
   * Issue upsert
   */
  export type IssueUpsertArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * The filter to search for the Issue to update in case it exists.
     * 
    **/
    where: IssueWhereUniqueInput
    /**
     * In case the Issue found by the `where` argument doesn't exist, create a new Issue with this data.
     * 
    **/
    create: XOR<IssueCreateInput, IssueUncheckedCreateInput>
    /**
     * In case the Issue was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IssueUpdateInput, IssueUncheckedUpdateInput>
  }


  /**
   * Issue delete
   */
  export type IssueDeleteArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
    /**
     * Filter which Issue to delete.
     * 
    **/
    where: IssueWhereUniqueInput
  }


  /**
   * Issue deleteMany
   */
  export type IssueDeleteManyArgs = {
    /**
     * Filter which Issues to delete
     * 
    **/
    where?: IssueWhereInput
  }


  /**
   * Issue findRaw
   */
  export type IssueFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Issue aggregateRaw
   */
  export type IssueAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Issue without action
   */
  export type IssueArgs = {
    /**
     * Select specific fields to fetch from the Issue
     * 
    **/
    select?: IssueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IssueInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    durations: number | null
  }

  export type SessionSumAggregateOutputType = {
    durations: number[] | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionName: string | null
    userId: string | null
    issueId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionName: string | null
    userId: string | null
    issueId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionName: number
    userId: number
    issueId: number
    durations: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    durations?: true
  }

  export type SessionSumAggregateInputType = {
    durations?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionName?: true
    userId?: true
    issueId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionName?: true
    userId?: true
    issueId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionName?: true
    userId?: true
    issueId?: true
    durations?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionName: string
    userId: string
    issueId: string
    durations: number[]
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionName?: boolean
    userId?: boolean
    issueId?: boolean
    durations?: boolean
    user?: boolean | UserArgs
    issue?: boolean | IssueArgs
    timerData?: boolean | TimerDataFindManyArgs
    _count?: boolean | SessionCountOutputTypeArgs
  }

  export type SessionInclude = {
    user?: boolean | UserArgs
    issue?: boolean | IssueArgs
    timerData?: boolean | TimerDataFindManyArgs
    _count?: boolean | SessionCountOutputTypeArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'issue' ? IssueGetPayload<S['include'][P]> :
        P extends 'timerData' ? Array < TimerDataGetPayload<S['include'][P]>>  :
        P extends '_count' ? SessionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'issue' ? IssueGetPayload<S['select'][P]> :
        P extends 'timerData' ? Array < TimerDataGetPayload<S['select'][P]>>  :
        P extends '_count' ? SessionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Find zero or more Sessions that matches the filter.
     * @param {SessionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const session = await prisma.session.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SessionFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Session.
     * @param {SessionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const session = await prisma.session.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SessionAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    issue<T extends IssueArgs = {}>(args?: Subset<T, IssueArgs>): CheckSelect<T, Prisma__IssueClient<Issue | null >, Prisma__IssueClient<IssueGetPayload<T> | null >>;

    timerData<T extends TimerDataFindManyArgs = {}>(args?: Subset<T, TimerDataFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TimerData>>, PrismaPromise<Array<TimerDataGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session findRaw
   */
  export type SessionFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Session aggregateRaw
   */
  export type SessionAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model TimerData
   */


  export type AggregateTimerData = {
    _count: TimerDataCountAggregateOutputType | null
    _min: TimerDataMinAggregateOutputType | null
    _max: TimerDataMaxAggregateOutputType | null
  }

  export type TimerDataMinAggregateOutputType = {
    id: string | null
    userId: string | null
    issueId: string | null
    sessionId: string | null
    startTime: Date | null
    stopTime: Date | null
  }

  export type TimerDataMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    issueId: string | null
    sessionId: string | null
    startTime: Date | null
    stopTime: Date | null
  }

  export type TimerDataCountAggregateOutputType = {
    id: number
    userId: number
    issueId: number
    sessionId: number
    startTime: number
    stopTime: number
    _all: number
  }


  export type TimerDataMinAggregateInputType = {
    id?: true
    userId?: true
    issueId?: true
    sessionId?: true
    startTime?: true
    stopTime?: true
  }

  export type TimerDataMaxAggregateInputType = {
    id?: true
    userId?: true
    issueId?: true
    sessionId?: true
    startTime?: true
    stopTime?: true
  }

  export type TimerDataCountAggregateInputType = {
    id?: true
    userId?: true
    issueId?: true
    sessionId?: true
    startTime?: true
    stopTime?: true
    _all?: true
  }

  export type TimerDataAggregateArgs = {
    /**
     * Filter which TimerData to aggregate.
     * 
    **/
    where?: TimerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimerData to fetch.
     * 
    **/
    orderBy?: Enumerable<TimerDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TimerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimerData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimerData.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimerData
    **/
    _count?: true | TimerDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimerDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimerDataMaxAggregateInputType
  }

  export type GetTimerDataAggregateType<T extends TimerDataAggregateArgs> = {
        [P in keyof T & keyof AggregateTimerData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimerData[P]>
      : GetScalarType<T[P], AggregateTimerData[P]>
  }




  export type TimerDataGroupByArgs = {
    where?: TimerDataWhereInput
    orderBy?: Enumerable<TimerDataOrderByWithAggregationInput>
    by: Array<TimerDataScalarFieldEnum>
    having?: TimerDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimerDataCountAggregateInputType | true
    _min?: TimerDataMinAggregateInputType
    _max?: TimerDataMaxAggregateInputType
  }


  export type TimerDataGroupByOutputType = {
    id: string
    userId: string
    issueId: string
    sessionId: string
    startTime: Date
    stopTime: Date | null
    _count: TimerDataCountAggregateOutputType | null
    _min: TimerDataMinAggregateOutputType | null
    _max: TimerDataMaxAggregateOutputType | null
  }

  type GetTimerDataGroupByPayload<T extends TimerDataGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TimerDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimerDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimerDataGroupByOutputType[P]>
            : GetScalarType<T[P], TimerDataGroupByOutputType[P]>
        }
      >
    >


  export type TimerDataSelect = {
    id?: boolean
    userId?: boolean
    issueId?: boolean
    sessionId?: boolean
    startTime?: boolean
    stopTime?: boolean
    user?: boolean | UserArgs
    issue?: boolean | IssueArgs
    session?: boolean | SessionArgs
  }

  export type TimerDataInclude = {
    user?: boolean | UserArgs
    issue?: boolean | IssueArgs
    session?: boolean | SessionArgs
  }

  export type TimerDataGetPayload<
    S extends boolean | null | undefined | TimerDataArgs,
    U = keyof S
      > = S extends true
        ? TimerData
    : S extends undefined
    ? never
    : S extends TimerDataArgs | TimerDataFindManyArgs
    ?'include' extends U
    ? TimerData  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'issue' ? IssueGetPayload<S['include'][P]> :
        P extends 'session' ? SessionGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'issue' ? IssueGetPayload<S['select'][P]> :
        P extends 'session' ? SessionGetPayload<S['select'][P]> :  P extends keyof TimerData ? TimerData[P] : never
  } 
    : TimerData
  : TimerData


  type TimerDataCountArgs = Merge<
    Omit<TimerDataFindManyArgs, 'select' | 'include'> & {
      select?: TimerDataCountAggregateInputType | true
    }
  >

  export interface TimerDataDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TimerData that matches the filter.
     * @param {TimerDataFindUniqueArgs} args - Arguments to find a TimerData
     * @example
     * // Get one TimerData
     * const timerData = await prisma.timerData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TimerDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TimerDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TimerData'> extends True ? CheckSelect<T, Prisma__TimerDataClient<TimerData>, Prisma__TimerDataClient<TimerDataGetPayload<T>>> : CheckSelect<T, Prisma__TimerDataClient<TimerData | null >, Prisma__TimerDataClient<TimerDataGetPayload<T> | null >>

    /**
     * Find the first TimerData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimerDataFindFirstArgs} args - Arguments to find a TimerData
     * @example
     * // Get one TimerData
     * const timerData = await prisma.timerData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TimerDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TimerDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TimerData'> extends True ? CheckSelect<T, Prisma__TimerDataClient<TimerData>, Prisma__TimerDataClient<TimerDataGetPayload<T>>> : CheckSelect<T, Prisma__TimerDataClient<TimerData | null >, Prisma__TimerDataClient<TimerDataGetPayload<T> | null >>

    /**
     * Find zero or more TimerData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimerDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimerData
     * const timerData = await prisma.timerData.findMany()
     * 
     * // Get first 10 TimerData
     * const timerData = await prisma.timerData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timerDataWithIdOnly = await prisma.timerData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TimerDataFindManyArgs>(
      args?: SelectSubset<T, TimerDataFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TimerData>>, PrismaPromise<Array<TimerDataGetPayload<T>>>>

    /**
     * Create a TimerData.
     * @param {TimerDataCreateArgs} args - Arguments to create a TimerData.
     * @example
     * // Create one TimerData
     * const TimerData = await prisma.timerData.create({
     *   data: {
     *     // ... data to create a TimerData
     *   }
     * })
     * 
    **/
    create<T extends TimerDataCreateArgs>(
      args: SelectSubset<T, TimerDataCreateArgs>
    ): CheckSelect<T, Prisma__TimerDataClient<TimerData>, Prisma__TimerDataClient<TimerDataGetPayload<T>>>

    /**
     * Create many TimerData.
     *     @param {TimerDataCreateManyArgs} args - Arguments to create many TimerData.
     *     @example
     *     // Create many TimerData
     *     const timerData = await prisma.timerData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TimerDataCreateManyArgs>(
      args?: SelectSubset<T, TimerDataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TimerData.
     * @param {TimerDataDeleteArgs} args - Arguments to delete one TimerData.
     * @example
     * // Delete one TimerData
     * const TimerData = await prisma.timerData.delete({
     *   where: {
     *     // ... filter to delete one TimerData
     *   }
     * })
     * 
    **/
    delete<T extends TimerDataDeleteArgs>(
      args: SelectSubset<T, TimerDataDeleteArgs>
    ): CheckSelect<T, Prisma__TimerDataClient<TimerData>, Prisma__TimerDataClient<TimerDataGetPayload<T>>>

    /**
     * Update one TimerData.
     * @param {TimerDataUpdateArgs} args - Arguments to update one TimerData.
     * @example
     * // Update one TimerData
     * const timerData = await prisma.timerData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TimerDataUpdateArgs>(
      args: SelectSubset<T, TimerDataUpdateArgs>
    ): CheckSelect<T, Prisma__TimerDataClient<TimerData>, Prisma__TimerDataClient<TimerDataGetPayload<T>>>

    /**
     * Delete zero or more TimerData.
     * @param {TimerDataDeleteManyArgs} args - Arguments to filter TimerData to delete.
     * @example
     * // Delete a few TimerData
     * const { count } = await prisma.timerData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TimerDataDeleteManyArgs>(
      args?: SelectSubset<T, TimerDataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimerDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimerData
     * const timerData = await prisma.timerData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TimerDataUpdateManyArgs>(
      args: SelectSubset<T, TimerDataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TimerData.
     * @param {TimerDataUpsertArgs} args - Arguments to update or create a TimerData.
     * @example
     * // Update or create a TimerData
     * const timerData = await prisma.timerData.upsert({
     *   create: {
     *     // ... data to create a TimerData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimerData we want to update
     *   }
     * })
    **/
    upsert<T extends TimerDataUpsertArgs>(
      args: SelectSubset<T, TimerDataUpsertArgs>
    ): CheckSelect<T, Prisma__TimerDataClient<TimerData>, Prisma__TimerDataClient<TimerDataGetPayload<T>>>

    /**
     * Find zero or more TimerData that matches the filter.
     * @param {TimerDataFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const timerData = await prisma.timerData.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TimerDataFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TimerData.
     * @param {TimerDataAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const timerData = await prisma.timerData.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TimerDataAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of TimerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimerDataCountArgs} args - Arguments to filter TimerData to count.
     * @example
     * // Count the number of TimerData
     * const count = await prisma.timerData.count({
     *   where: {
     *     // ... the filter for the TimerData we want to count
     *   }
     * })
    **/
    count<T extends TimerDataCountArgs>(
      args?: Subset<T, TimerDataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimerDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimerDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimerDataAggregateArgs>(args: Subset<T, TimerDataAggregateArgs>): PrismaPromise<GetTimerDataAggregateType<T>>

    /**
     * Group by TimerData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimerDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimerDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimerDataGroupByArgs['orderBy'] }
        : { orderBy?: TimerDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimerDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimerDataGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimerData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TimerDataClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    issue<T extends IssueArgs = {}>(args?: Subset<T, IssueArgs>): CheckSelect<T, Prisma__IssueClient<Issue | null >, Prisma__IssueClient<IssueGetPayload<T> | null >>;

    session<T extends SessionArgs = {}>(args?: Subset<T, SessionArgs>): CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TimerData findUnique
   */
  export type TimerDataFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * Throw an Error if a TimerData can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TimerData to fetch.
     * 
    **/
    where: TimerDataWhereUniqueInput
  }


  /**
   * TimerData findFirst
   */
  export type TimerDataFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * Throw an Error if a TimerData can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TimerData to fetch.
     * 
    **/
    where?: TimerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimerData to fetch.
     * 
    **/
    orderBy?: Enumerable<TimerDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimerData.
     * 
    **/
    cursor?: TimerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimerData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimerData.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimerData.
     * 
    **/
    distinct?: Enumerable<TimerDataScalarFieldEnum>
  }


  /**
   * TimerData findMany
   */
  export type TimerDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * Filter, which TimerData to fetch.
     * 
    **/
    where?: TimerDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimerData to fetch.
     * 
    **/
    orderBy?: Enumerable<TimerDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimerData.
     * 
    **/
    cursor?: TimerDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimerData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimerData.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TimerDataScalarFieldEnum>
  }


  /**
   * TimerData create
   */
  export type TimerDataCreateArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * The data needed to create a TimerData.
     * 
    **/
    data: XOR<TimerDataCreateInput, TimerDataUncheckedCreateInput>
  }


  /**
   * TimerData createMany
   */
  export type TimerDataCreateManyArgs = {
    /**
     * The data used to create many TimerData.
     * 
    **/
    data: Enumerable<TimerDataCreateManyInput>
  }


  /**
   * TimerData update
   */
  export type TimerDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * The data needed to update a TimerData.
     * 
    **/
    data: XOR<TimerDataUpdateInput, TimerDataUncheckedUpdateInput>
    /**
     * Choose, which TimerData to update.
     * 
    **/
    where: TimerDataWhereUniqueInput
  }


  /**
   * TimerData updateMany
   */
  export type TimerDataUpdateManyArgs = {
    /**
     * The data used to update TimerData.
     * 
    **/
    data: XOR<TimerDataUpdateManyMutationInput, TimerDataUncheckedUpdateManyInput>
    /**
     * Filter which TimerData to update
     * 
    **/
    where?: TimerDataWhereInput
  }


  /**
   * TimerData upsert
   */
  export type TimerDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * The filter to search for the TimerData to update in case it exists.
     * 
    **/
    where: TimerDataWhereUniqueInput
    /**
     * In case the TimerData found by the `where` argument doesn't exist, create a new TimerData with this data.
     * 
    **/
    create: XOR<TimerDataCreateInput, TimerDataUncheckedCreateInput>
    /**
     * In case the TimerData was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TimerDataUpdateInput, TimerDataUncheckedUpdateInput>
  }


  /**
   * TimerData delete
   */
  export type TimerDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
    /**
     * Filter which TimerData to delete.
     * 
    **/
    where: TimerDataWhereUniqueInput
  }


  /**
   * TimerData deleteMany
   */
  export type TimerDataDeleteManyArgs = {
    /**
     * Filter which TimerData to delete
     * 
    **/
    where?: TimerDataWhereInput
  }


  /**
   * TimerData findRaw
   */
  export type TimerDataFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * TimerData aggregateRaw
   */
  export type TimerDataAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * TimerData without action
   */
  export type TimerDataArgs = {
    /**
     * Select specific fields to fetch from the TimerData
     * 
    **/
    select?: TimerDataSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TimerDataInclude | null
  }



  /**
   * Model UserIssueJoin
   */


  export type AggregateUserIssueJoin = {
    _count: UserIssueJoinCountAggregateOutputType | null
    _avg: UserIssueJoinAvgAggregateOutputType | null
    _sum: UserIssueJoinSumAggregateOutputType | null
    _min: UserIssueJoinMinAggregateOutputType | null
    _max: UserIssueJoinMaxAggregateOutputType | null
  }

  export type UserIssueJoinAvgAggregateOutputType = {
    totalDuration: number | null
  }

  export type UserIssueJoinSumAggregateOutputType = {
    totalDuration: number | null
  }

  export type UserIssueJoinMinAggregateOutputType = {
    id: string | null
    username: string | null
    issueName: string | null
    totalDuration: number | null
  }

  export type UserIssueJoinMaxAggregateOutputType = {
    id: string | null
    username: string | null
    issueName: string | null
    totalDuration: number | null
  }

  export type UserIssueJoinCountAggregateOutputType = {
    id: number
    username: number
    issueName: number
    totalDuration: number
    _all: number
  }


  export type UserIssueJoinAvgAggregateInputType = {
    totalDuration?: true
  }

  export type UserIssueJoinSumAggregateInputType = {
    totalDuration?: true
  }

  export type UserIssueJoinMinAggregateInputType = {
    id?: true
    username?: true
    issueName?: true
    totalDuration?: true
  }

  export type UserIssueJoinMaxAggregateInputType = {
    id?: true
    username?: true
    issueName?: true
    totalDuration?: true
  }

  export type UserIssueJoinCountAggregateInputType = {
    id?: true
    username?: true
    issueName?: true
    totalDuration?: true
    _all?: true
  }

  export type UserIssueJoinAggregateArgs = {
    /**
     * Filter which UserIssueJoin to aggregate.
     * 
    **/
    where?: UserIssueJoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserIssueJoins to fetch.
     * 
    **/
    orderBy?: Enumerable<UserIssueJoinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserIssueJoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserIssueJoins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserIssueJoins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserIssueJoins
    **/
    _count?: true | UserIssueJoinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserIssueJoinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserIssueJoinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserIssueJoinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserIssueJoinMaxAggregateInputType
  }

  export type GetUserIssueJoinAggregateType<T extends UserIssueJoinAggregateArgs> = {
        [P in keyof T & keyof AggregateUserIssueJoin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserIssueJoin[P]>
      : GetScalarType<T[P], AggregateUserIssueJoin[P]>
  }




  export type UserIssueJoinGroupByArgs = {
    where?: UserIssueJoinWhereInput
    orderBy?: Enumerable<UserIssueJoinOrderByWithAggregationInput>
    by: Array<UserIssueJoinScalarFieldEnum>
    having?: UserIssueJoinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserIssueJoinCountAggregateInputType | true
    _avg?: UserIssueJoinAvgAggregateInputType
    _sum?: UserIssueJoinSumAggregateInputType
    _min?: UserIssueJoinMinAggregateInputType
    _max?: UserIssueJoinMaxAggregateInputType
  }


  export type UserIssueJoinGroupByOutputType = {
    id: string
    username: string
    issueName: string
    totalDuration: number
    _count: UserIssueJoinCountAggregateOutputType | null
    _avg: UserIssueJoinAvgAggregateOutputType | null
    _sum: UserIssueJoinSumAggregateOutputType | null
    _min: UserIssueJoinMinAggregateOutputType | null
    _max: UserIssueJoinMaxAggregateOutputType | null
  }

  type GetUserIssueJoinGroupByPayload<T extends UserIssueJoinGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserIssueJoinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserIssueJoinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserIssueJoinGroupByOutputType[P]>
            : GetScalarType<T[P], UserIssueJoinGroupByOutputType[P]>
        }
      >
    >


  export type UserIssueJoinSelect = {
    id?: boolean
    username?: boolean
    issueName?: boolean
    totalDuration?: boolean
    user?: boolean | UserArgs
    issue?: boolean | IssueArgs
  }

  export type UserIssueJoinInclude = {
    user?: boolean | UserArgs
    issue?: boolean | IssueArgs
  }

  export type UserIssueJoinGetPayload<
    S extends boolean | null | undefined | UserIssueJoinArgs,
    U = keyof S
      > = S extends true
        ? UserIssueJoin
    : S extends undefined
    ? never
    : S extends UserIssueJoinArgs | UserIssueJoinFindManyArgs
    ?'include' extends U
    ? UserIssueJoin  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'issue' ? IssueGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'issue' ? IssueGetPayload<S['select'][P]> :  P extends keyof UserIssueJoin ? UserIssueJoin[P] : never
  } 
    : UserIssueJoin
  : UserIssueJoin


  type UserIssueJoinCountArgs = Merge<
    Omit<UserIssueJoinFindManyArgs, 'select' | 'include'> & {
      select?: UserIssueJoinCountAggregateInputType | true
    }
  >

  export interface UserIssueJoinDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserIssueJoin that matches the filter.
     * @param {UserIssueJoinFindUniqueArgs} args - Arguments to find a UserIssueJoin
     * @example
     * // Get one UserIssueJoin
     * const userIssueJoin = await prisma.userIssueJoin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserIssueJoinFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserIssueJoinFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserIssueJoin'> extends True ? CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin>, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T>>> : CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin | null >, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T> | null >>

    /**
     * Find the first UserIssueJoin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserIssueJoinFindFirstArgs} args - Arguments to find a UserIssueJoin
     * @example
     * // Get one UserIssueJoin
     * const userIssueJoin = await prisma.userIssueJoin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserIssueJoinFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserIssueJoinFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserIssueJoin'> extends True ? CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin>, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T>>> : CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin | null >, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T> | null >>

    /**
     * Find zero or more UserIssueJoins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserIssueJoinFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserIssueJoins
     * const userIssueJoins = await prisma.userIssueJoin.findMany()
     * 
     * // Get first 10 UserIssueJoins
     * const userIssueJoins = await prisma.userIssueJoin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userIssueJoinWithIdOnly = await prisma.userIssueJoin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserIssueJoinFindManyArgs>(
      args?: SelectSubset<T, UserIssueJoinFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserIssueJoin>>, PrismaPromise<Array<UserIssueJoinGetPayload<T>>>>

    /**
     * Create a UserIssueJoin.
     * @param {UserIssueJoinCreateArgs} args - Arguments to create a UserIssueJoin.
     * @example
     * // Create one UserIssueJoin
     * const UserIssueJoin = await prisma.userIssueJoin.create({
     *   data: {
     *     // ... data to create a UserIssueJoin
     *   }
     * })
     * 
    **/
    create<T extends UserIssueJoinCreateArgs>(
      args: SelectSubset<T, UserIssueJoinCreateArgs>
    ): CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin>, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T>>>

    /**
     * Create many UserIssueJoins.
     *     @param {UserIssueJoinCreateManyArgs} args - Arguments to create many UserIssueJoins.
     *     @example
     *     // Create many UserIssueJoins
     *     const userIssueJoin = await prisma.userIssueJoin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserIssueJoinCreateManyArgs>(
      args?: SelectSubset<T, UserIssueJoinCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserIssueJoin.
     * @param {UserIssueJoinDeleteArgs} args - Arguments to delete one UserIssueJoin.
     * @example
     * // Delete one UserIssueJoin
     * const UserIssueJoin = await prisma.userIssueJoin.delete({
     *   where: {
     *     // ... filter to delete one UserIssueJoin
     *   }
     * })
     * 
    **/
    delete<T extends UserIssueJoinDeleteArgs>(
      args: SelectSubset<T, UserIssueJoinDeleteArgs>
    ): CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin>, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T>>>

    /**
     * Update one UserIssueJoin.
     * @param {UserIssueJoinUpdateArgs} args - Arguments to update one UserIssueJoin.
     * @example
     * // Update one UserIssueJoin
     * const userIssueJoin = await prisma.userIssueJoin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserIssueJoinUpdateArgs>(
      args: SelectSubset<T, UserIssueJoinUpdateArgs>
    ): CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin>, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T>>>

    /**
     * Delete zero or more UserIssueJoins.
     * @param {UserIssueJoinDeleteManyArgs} args - Arguments to filter UserIssueJoins to delete.
     * @example
     * // Delete a few UserIssueJoins
     * const { count } = await prisma.userIssueJoin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserIssueJoinDeleteManyArgs>(
      args?: SelectSubset<T, UserIssueJoinDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserIssueJoins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserIssueJoinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserIssueJoins
     * const userIssueJoin = await prisma.userIssueJoin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserIssueJoinUpdateManyArgs>(
      args: SelectSubset<T, UserIssueJoinUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserIssueJoin.
     * @param {UserIssueJoinUpsertArgs} args - Arguments to update or create a UserIssueJoin.
     * @example
     * // Update or create a UserIssueJoin
     * const userIssueJoin = await prisma.userIssueJoin.upsert({
     *   create: {
     *     // ... data to create a UserIssueJoin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserIssueJoin we want to update
     *   }
     * })
    **/
    upsert<T extends UserIssueJoinUpsertArgs>(
      args: SelectSubset<T, UserIssueJoinUpsertArgs>
    ): CheckSelect<T, Prisma__UserIssueJoinClient<UserIssueJoin>, Prisma__UserIssueJoinClient<UserIssueJoinGetPayload<T>>>

    /**
     * Find zero or more UserIssueJoins that matches the filter.
     * @param {UserIssueJoinFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userIssueJoin = await prisma.userIssueJoin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserIssueJoinFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserIssueJoin.
     * @param {UserIssueJoinAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userIssueJoin = await prisma.userIssueJoin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserIssueJoinAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of UserIssueJoins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserIssueJoinCountArgs} args - Arguments to filter UserIssueJoins to count.
     * @example
     * // Count the number of UserIssueJoins
     * const count = await prisma.userIssueJoin.count({
     *   where: {
     *     // ... the filter for the UserIssueJoins we want to count
     *   }
     * })
    **/
    count<T extends UserIssueJoinCountArgs>(
      args?: Subset<T, UserIssueJoinCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserIssueJoinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserIssueJoin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserIssueJoinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserIssueJoinAggregateArgs>(args: Subset<T, UserIssueJoinAggregateArgs>): PrismaPromise<GetUserIssueJoinAggregateType<T>>

    /**
     * Group by UserIssueJoin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserIssueJoinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserIssueJoinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserIssueJoinGroupByArgs['orderBy'] }
        : { orderBy?: UserIssueJoinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserIssueJoinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserIssueJoinGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserIssueJoin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserIssueJoinClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    issue<T extends IssueArgs = {}>(args?: Subset<T, IssueArgs>): CheckSelect<T, Prisma__IssueClient<Issue | null >, Prisma__IssueClient<IssueGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserIssueJoin findUnique
   */
  export type UserIssueJoinFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * Throw an Error if a UserIssueJoin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserIssueJoin to fetch.
     * 
    **/
    where: UserIssueJoinWhereUniqueInput
  }


  /**
   * UserIssueJoin findFirst
   */
  export type UserIssueJoinFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * Throw an Error if a UserIssueJoin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserIssueJoin to fetch.
     * 
    **/
    where?: UserIssueJoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserIssueJoins to fetch.
     * 
    **/
    orderBy?: Enumerable<UserIssueJoinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserIssueJoins.
     * 
    **/
    cursor?: UserIssueJoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserIssueJoins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserIssueJoins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserIssueJoins.
     * 
    **/
    distinct?: Enumerable<UserIssueJoinScalarFieldEnum>
  }


  /**
   * UserIssueJoin findMany
   */
  export type UserIssueJoinFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * Filter, which UserIssueJoins to fetch.
     * 
    **/
    where?: UserIssueJoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserIssueJoins to fetch.
     * 
    **/
    orderBy?: Enumerable<UserIssueJoinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserIssueJoins.
     * 
    **/
    cursor?: UserIssueJoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserIssueJoins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserIssueJoins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserIssueJoinScalarFieldEnum>
  }


  /**
   * UserIssueJoin create
   */
  export type UserIssueJoinCreateArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * The data needed to create a UserIssueJoin.
     * 
    **/
    data: XOR<UserIssueJoinCreateInput, UserIssueJoinUncheckedCreateInput>
  }


  /**
   * UserIssueJoin createMany
   */
  export type UserIssueJoinCreateManyArgs = {
    /**
     * The data used to create many UserIssueJoins.
     * 
    **/
    data: Enumerable<UserIssueJoinCreateManyInput>
  }


  /**
   * UserIssueJoin update
   */
  export type UserIssueJoinUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * The data needed to update a UserIssueJoin.
     * 
    **/
    data: XOR<UserIssueJoinUpdateInput, UserIssueJoinUncheckedUpdateInput>
    /**
     * Choose, which UserIssueJoin to update.
     * 
    **/
    where: UserIssueJoinWhereUniqueInput
  }


  /**
   * UserIssueJoin updateMany
   */
  export type UserIssueJoinUpdateManyArgs = {
    /**
     * The data used to update UserIssueJoins.
     * 
    **/
    data: XOR<UserIssueJoinUpdateManyMutationInput, UserIssueJoinUncheckedUpdateManyInput>
    /**
     * Filter which UserIssueJoins to update
     * 
    **/
    where?: UserIssueJoinWhereInput
  }


  /**
   * UserIssueJoin upsert
   */
  export type UserIssueJoinUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * The filter to search for the UserIssueJoin to update in case it exists.
     * 
    **/
    where: UserIssueJoinWhereUniqueInput
    /**
     * In case the UserIssueJoin found by the `where` argument doesn't exist, create a new UserIssueJoin with this data.
     * 
    **/
    create: XOR<UserIssueJoinCreateInput, UserIssueJoinUncheckedCreateInput>
    /**
     * In case the UserIssueJoin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserIssueJoinUpdateInput, UserIssueJoinUncheckedUpdateInput>
  }


  /**
   * UserIssueJoin delete
   */
  export type UserIssueJoinDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
    /**
     * Filter which UserIssueJoin to delete.
     * 
    **/
    where: UserIssueJoinWhereUniqueInput
  }


  /**
   * UserIssueJoin deleteMany
   */
  export type UserIssueJoinDeleteManyArgs = {
    /**
     * Filter which UserIssueJoins to delete
     * 
    **/
    where?: UserIssueJoinWhereInput
  }


  /**
   * UserIssueJoin findRaw
   */
  export type UserIssueJoinFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * UserIssueJoin aggregateRaw
   */
  export type UserIssueJoinAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * UserIssueJoin without action
   */
  export type UserIssueJoinArgs = {
    /**
     * Select specific fields to fetch from the UserIssueJoin
     * 
    **/
    select?: UserIssueJoinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserIssueJoinInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const IssueScalarFieldEnum: {
    id: 'id',
    issueName: 'issueName'
  };

  export type IssueScalarFieldEnum = (typeof IssueScalarFieldEnum)[keyof typeof IssueScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionName: 'sessionName',
    userId: 'userId',
    issueId: 'issueId',
    durations: 'durations'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const TimerDataScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    issueId: 'issueId',
    sessionId: 'sessionId',
    startTime: 'startTime',
    stopTime: 'stopTime'
  };

  export type TimerDataScalarFieldEnum = (typeof TimerDataScalarFieldEnum)[keyof typeof TimerDataScalarFieldEnum]


  export const UserIssueJoinScalarFieldEnum: {
    id: 'id',
    username: 'username',
    issueName: 'issueName',
    totalDuration: 'totalDuration'
  };

  export type UserIssueJoinScalarFieldEnum = (typeof UserIssueJoinScalarFieldEnum)[keyof typeof UserIssueJoinScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    sessions?: SessionListRelationFilter
    timerData?: TimerDataListRelationFilter
    userIssueJoins?: UserIssueJoinListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    timerData?: TimerDataOrderByRelationAggregateInput
    userIssueJoins?: UserIssueJoinOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    username?: string
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    sessions?: SessionListRelationFilter
    timerData?: TimerDataListRelationFilter
    userIssueJoins?: UserIssueJoinListRelationFilter
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
  }

  export type IssueWhereInput = {
    AND?: Enumerable<IssueWhereInput>
    OR?: Enumerable<IssueWhereInput>
    NOT?: Enumerable<IssueWhereInput>
    id?: StringFilter | string
    issueName?: StringFilter | string
    sessions?: SessionListRelationFilter
    timerData?: TimerDataListRelationFilter
    userIssueJoins?: UserIssueJoinListRelationFilter
  }

  export type IssueOrderByWithRelationInput = {
    id?: SortOrder
    issueName?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    timerData?: TimerDataOrderByRelationAggregateInput
    userIssueJoins?: UserIssueJoinOrderByRelationAggregateInput
  }

  export type IssueWhereUniqueInput = {
    id?: string
    issueName?: string
    AND?: Enumerable<IssueWhereInput>
    OR?: Enumerable<IssueWhereInput>
    NOT?: Enumerable<IssueWhereInput>
    sessions?: SessionListRelationFilter
    timerData?: TimerDataListRelationFilter
    userIssueJoins?: UserIssueJoinListRelationFilter
  }

  export type IssueOrderByWithAggregationInput = {
    id?: SortOrder
    issueName?: SortOrder
    _count?: IssueCountOrderByAggregateInput
    _max?: IssueMaxOrderByAggregateInput
    _min?: IssueMinOrderByAggregateInput
  }

  export type IssueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IssueScalarWhereWithAggregatesInput>
    OR?: Enumerable<IssueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IssueScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    issueName?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionName?: StringFilter | string
    userId?: StringFilter | string
    issueId?: StringFilter | string
    durations?: IntNullableListFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    issue?: XOR<IssueRelationFilter, IssueWhereInput>
    timerData?: TimerDataListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionName?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    durations?: SortOrder
    user?: UserOrderByWithRelationInput
    issue?: IssueOrderByWithRelationInput
    timerData?: TimerDataOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionName?: string
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    userId?: StringFilter | string
    issueId?: StringFilter | string
    durations?: IntNullableListFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    issue?: XOR<IssueRelationFilter, IssueWhereInput>
    timerData?: TimerDataListRelationFilter
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionName?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    durations?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionName?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    issueId?: StringWithAggregatesFilter | string
    durations?: IntNullableListFilter
  }

  export type TimerDataWhereInput = {
    AND?: Enumerable<TimerDataWhereInput>
    OR?: Enumerable<TimerDataWhereInput>
    NOT?: Enumerable<TimerDataWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    issueId?: StringFilter | string
    sessionId?: StringFilter | string
    startTime?: DateTimeFilter | Date | string
    stopTime?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    issue?: XOR<IssueRelationFilter, IssueWhereInput>
    session?: XOR<SessionRelationFilter, SessionWhereInput>
  }

  export type TimerDataOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    sessionId?: SortOrder
    startTime?: SortOrder
    stopTime?: SortOrder
    user?: UserOrderByWithRelationInput
    issue?: IssueOrderByWithRelationInput
    session?: SessionOrderByWithRelationInput
  }

  export type TimerDataWhereUniqueInput = {
    id?: string
    AND?: Enumerable<TimerDataWhereInput>
    OR?: Enumerable<TimerDataWhereInput>
    NOT?: Enumerable<TimerDataWhereInput>
    userId?: StringFilter | string
    issueId?: StringFilter | string
    sessionId?: StringFilter | string
    startTime?: DateTimeFilter | Date | string
    stopTime?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    issue?: XOR<IssueRelationFilter, IssueWhereInput>
    session?: XOR<SessionRelationFilter, SessionWhereInput>
  }

  export type TimerDataOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    sessionId?: SortOrder
    startTime?: SortOrder
    stopTime?: SortOrder
    _count?: TimerDataCountOrderByAggregateInput
    _max?: TimerDataMaxOrderByAggregateInput
    _min?: TimerDataMinOrderByAggregateInput
  }

  export type TimerDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TimerDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<TimerDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TimerDataScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    issueId?: StringWithAggregatesFilter | string
    sessionId?: StringWithAggregatesFilter | string
    startTime?: DateTimeWithAggregatesFilter | Date | string
    stopTime?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UserIssueJoinWhereInput = {
    AND?: Enumerable<UserIssueJoinWhereInput>
    OR?: Enumerable<UserIssueJoinWhereInput>
    NOT?: Enumerable<UserIssueJoinWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    issueName?: StringFilter | string
    totalDuration?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    issue?: XOR<IssueRelationFilter, IssueWhereInput>
  }

  export type UserIssueJoinOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    issueName?: SortOrder
    totalDuration?: SortOrder
    user?: UserOrderByWithRelationInput
    issue?: IssueOrderByWithRelationInput
  }

  export type UserIssueJoinWhereUniqueInput = {
    id?: string
    username_issueName?: UserIssueJoinUsernameIssueNameCompoundUniqueInput
    AND?: Enumerable<UserIssueJoinWhereInput>
    OR?: Enumerable<UserIssueJoinWhereInput>
    NOT?: Enumerable<UserIssueJoinWhereInput>
    username?: StringFilter | string
    issueName?: StringFilter | string
    totalDuration?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    issue?: XOR<IssueRelationFilter, IssueWhereInput>
  }

  export type UserIssueJoinOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    issueName?: SortOrder
    totalDuration?: SortOrder
    _count?: UserIssueJoinCountOrderByAggregateInput
    _avg?: UserIssueJoinAvgOrderByAggregateInput
    _max?: UserIssueJoinMaxOrderByAggregateInput
    _min?: UserIssueJoinMinOrderByAggregateInput
    _sum?: UserIssueJoinSumOrderByAggregateInput
  }

  export type UserIssueJoinScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserIssueJoinScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserIssueJoinScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserIssueJoinScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    issueName?: StringWithAggregatesFilter | string
    totalDuration?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    id?: string
    username: string
    sessions?: SessionCreateNestedManyWithoutUserInput
    timerData?: TimerDataCreateNestedManyWithoutUserInput
    userIssueJoins?: UserIssueJoinCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    timerData?: TimerDataUncheckedCreateNestedManyWithoutUserInput
    userIssueJoins?: UserIssueJoinUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    timerData?: TimerDataUpdateManyWithoutUserNestedInput
    userIssueJoins?: UserIssueJoinUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    timerData?: TimerDataUncheckedUpdateManyWithoutUserNestedInput
    userIssueJoins?: UserIssueJoinUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type IssueCreateInput = {
    id?: string
    issueName: string
    sessions?: SessionCreateNestedManyWithoutIssueInput
    timerData?: TimerDataCreateNestedManyWithoutIssueInput
    userIssueJoins?: UserIssueJoinCreateNestedManyWithoutIssueInput
  }

  export type IssueUncheckedCreateInput = {
    id?: string
    issueName: string
    sessions?: SessionUncheckedCreateNestedManyWithoutIssueInput
    timerData?: TimerDataUncheckedCreateNestedManyWithoutIssueInput
    userIssueJoins?: UserIssueJoinUncheckedCreateNestedManyWithoutIssueInput
  }

  export type IssueUpdateInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutIssueNestedInput
    timerData?: TimerDataUpdateManyWithoutIssueNestedInput
    userIssueJoins?: UserIssueJoinUpdateManyWithoutIssueNestedInput
  }

  export type IssueUncheckedUpdateInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutIssueNestedInput
    timerData?: TimerDataUncheckedUpdateManyWithoutIssueNestedInput
    userIssueJoins?: UserIssueJoinUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type IssueCreateManyInput = {
    id?: string
    issueName: string
  }

  export type IssueUpdateManyMutationInput = {
    issueName?: StringFieldUpdateOperationsInput | string
  }

  export type IssueUncheckedUpdateManyInput = {
    issueName?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id?: string
    sessionName: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    user: UserCreateNestedOneWithoutSessionsInput
    issue: IssueCreateNestedOneWithoutSessionsInput
    timerData?: TimerDataCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionName: string
    userId: string
    issueId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    timerData?: TimerDataUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    issue?: IssueUpdateOneRequiredWithoutSessionsNestedInput
    timerData?: TimerDataUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    timerData?: TimerDataUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionName: string
    userId: string
    issueId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
  }

  export type SessionUpdateManyMutationInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
  }

  export type SessionUncheckedUpdateManyInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
  }

  export type TimerDataCreateInput = {
    id?: string
    startTime: Date | string
    stopTime?: Date | string | null
    user: UserCreateNestedOneWithoutTimerDataInput
    issue: IssueCreateNestedOneWithoutTimerDataInput
    session: SessionCreateNestedOneWithoutTimerDataInput
  }

  export type TimerDataUncheckedCreateInput = {
    id?: string
    userId: string
    issueId: string
    sessionId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type TimerDataUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTimerDataNestedInput
    issue?: IssueUpdateOneRequiredWithoutTimerDataNestedInput
    session?: SessionUpdateOneRequiredWithoutTimerDataNestedInput
  }

  export type TimerDataUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TimerDataCreateManyInput = {
    id?: string
    userId: string
    issueId: string
    sessionId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type TimerDataUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TimerDataUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserIssueJoinCreateInput = {
    id?: string
    totalDuration: number
    user: UserCreateNestedOneWithoutUserIssueJoinsInput
    issue: IssueCreateNestedOneWithoutUserIssueJoinsInput
  }

  export type UserIssueJoinUncheckedCreateInput = {
    id?: string
    username: string
    issueName: string
    totalDuration: number
  }

  export type UserIssueJoinUpdateInput = {
    totalDuration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserIssueJoinsNestedInput
    issue?: IssueUpdateOneRequiredWithoutUserIssueJoinsNestedInput
  }

  export type UserIssueJoinUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    issueName?: StringFieldUpdateOperationsInput | string
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type UserIssueJoinCreateManyInput = {
    id?: string
    username: string
    issueName: string
    totalDuration: number
  }

  export type UserIssueJoinUpdateManyMutationInput = {
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type UserIssueJoinUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    issueName?: StringFieldUpdateOperationsInput | string
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string | StringFieldRefInput
    in?: Enumerable<string> | ListStringFieldRefInput
    notIn?: Enumerable<string> | ListStringFieldRefInput
    lt?: string | StringFieldRefInput
    lte?: string | StringFieldRefInput
    gt?: string | StringFieldRefInput
    gte?: string | StringFieldRefInput
    contains?: string | StringFieldRefInput
    startsWith?: string | StringFieldRefInput
    endsWith?: string | StringFieldRefInput
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type TimerDataListRelationFilter = {
    every?: TimerDataWhereInput
    some?: TimerDataWhereInput
    none?: TimerDataWhereInput
  }

  export type UserIssueJoinListRelationFilter = {
    every?: UserIssueJoinWhereInput
    some?: UserIssueJoinWhereInput
    none?: UserIssueJoinWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimerDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserIssueJoinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string | StringFieldRefInput
    in?: Enumerable<string> | ListStringFieldRefInput
    notIn?: Enumerable<string> | ListStringFieldRefInput
    lt?: string | StringFieldRefInput
    lte?: string | StringFieldRefInput
    gt?: string | StringFieldRefInput
    gte?: string | StringFieldRefInput
    contains?: string | StringFieldRefInput
    startsWith?: string | StringFieldRefInput
    endsWith?: string | StringFieldRefInput
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IssueCountOrderByAggregateInput = {
    id?: SortOrder
    issueName?: SortOrder
  }

  export type IssueMaxOrderByAggregateInput = {
    id?: SortOrder
    issueName?: SortOrder
  }

  export type IssueMinOrderByAggregateInput = {
    id?: SortOrder
    issueName?: SortOrder
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | ListIntFieldRefInput | null
    has?: number | IntFieldRefInput | null
    hasEvery?: Enumerable<number> | ListIntFieldRefInput
    hasSome?: Enumerable<number> | ListIntFieldRefInput
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IssueRelationFilter = {
    is?: IssueWhereInput
    isNot?: IssueWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionName?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    durations?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    durations?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionName?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionName?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    durations?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string | DateTimeFieldRefInput
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | DateTimeFieldRefInput | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeNullableFilter | Date | string | null
    isSet?: boolean
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type TimerDataCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    sessionId?: SortOrder
    startTime?: SortOrder
    stopTime?: SortOrder
  }

  export type TimerDataMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    sessionId?: SortOrder
    startTime?: SortOrder
    stopTime?: SortOrder
  }

  export type TimerDataMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    issueId?: SortOrder
    sessionId?: SortOrder
    startTime?: SortOrder
    stopTime?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string | DateTimeFieldRefInput
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | DateTimeFieldRefInput | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    isSet?: boolean
  }

  export type IntFilter = {
    equals?: number | IntFieldRefInput
    in?: Enumerable<number> | ListIntFieldRefInput
    notIn?: Enumerable<number> | ListIntFieldRefInput
    lt?: number | IntFieldRefInput
    lte?: number | IntFieldRefInput
    gt?: number | IntFieldRefInput
    gte?: number | IntFieldRefInput
    not?: NestedIntFilter | number
  }

  export type UserIssueJoinUsernameIssueNameCompoundUniqueInput = {
    username: string
    issueName: string
  }

  export type UserIssueJoinCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    issueName?: SortOrder
    totalDuration?: SortOrder
  }

  export type UserIssueJoinAvgOrderByAggregateInput = {
    totalDuration?: SortOrder
  }

  export type UserIssueJoinMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    issueName?: SortOrder
    totalDuration?: SortOrder
  }

  export type UserIssueJoinMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    issueName?: SortOrder
    totalDuration?: SortOrder
  }

  export type UserIssueJoinSumOrderByAggregateInput = {
    totalDuration?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number | IntFieldRefInput
    in?: Enumerable<number> | ListIntFieldRefInput
    notIn?: Enumerable<number> | ListIntFieldRefInput
    lt?: number | IntFieldRefInput
    lte?: number | IntFieldRefInput
    gt?: number | IntFieldRefInput
    gte?: number | IntFieldRefInput
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type TimerDataCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutUserInput>, Enumerable<TimerDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutUserInput>
    createMany?: TimerDataCreateManyUserInputEnvelope
    connect?: Enumerable<TimerDataWhereUniqueInput>
  }

  export type UserIssueJoinCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutUserInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutUserInput>
    createMany?: UserIssueJoinCreateManyUserInputEnvelope
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type TimerDataUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutUserInput>, Enumerable<TimerDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutUserInput>
    createMany?: TimerDataCreateManyUserInputEnvelope
    connect?: Enumerable<TimerDataWhereUniqueInput>
  }

  export type UserIssueJoinUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutUserInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutUserInput>
    createMany?: UserIssueJoinCreateManyUserInputEnvelope
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type TimerDataUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutUserInput>, Enumerable<TimerDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TimerDataUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TimerDataCreateManyUserInputEnvelope
    set?: Enumerable<TimerDataWhereUniqueInput>
    disconnect?: Enumerable<TimerDataWhereUniqueInput>
    delete?: Enumerable<TimerDataWhereUniqueInput>
    connect?: Enumerable<TimerDataWhereUniqueInput>
    update?: Enumerable<TimerDataUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TimerDataUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TimerDataScalarWhereInput>
  }

  export type UserIssueJoinUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutUserInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserIssueJoinUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserIssueJoinCreateManyUserInputEnvelope
    set?: Enumerable<UserIssueJoinWhereUniqueInput>
    disconnect?: Enumerable<UserIssueJoinWhereUniqueInput>
    delete?: Enumerable<UserIssueJoinWhereUniqueInput>
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
    update?: Enumerable<UserIssueJoinUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserIssueJoinUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserIssueJoinScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type TimerDataUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutUserInput>, Enumerable<TimerDataUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TimerDataUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TimerDataCreateManyUserInputEnvelope
    set?: Enumerable<TimerDataWhereUniqueInput>
    disconnect?: Enumerable<TimerDataWhereUniqueInput>
    delete?: Enumerable<TimerDataWhereUniqueInput>
    connect?: Enumerable<TimerDataWhereUniqueInput>
    update?: Enumerable<TimerDataUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TimerDataUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TimerDataScalarWhereInput>
  }

  export type UserIssueJoinUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutUserInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserIssueJoinUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserIssueJoinCreateManyUserInputEnvelope
    set?: Enumerable<UserIssueJoinWhereUniqueInput>
    disconnect?: Enumerable<UserIssueJoinWhereUniqueInput>
    delete?: Enumerable<UserIssueJoinWhereUniqueInput>
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
    update?: Enumerable<UserIssueJoinUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserIssueJoinUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserIssueJoinScalarWhereInput>
  }

  export type SessionCreateNestedManyWithoutIssueInput = {
    create?: XOR<Enumerable<SessionCreateWithoutIssueInput>, Enumerable<SessionUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutIssueInput>
    createMany?: SessionCreateManyIssueInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type TimerDataCreateNestedManyWithoutIssueInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutIssueInput>, Enumerable<TimerDataUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutIssueInput>
    createMany?: TimerDataCreateManyIssueInputEnvelope
    connect?: Enumerable<TimerDataWhereUniqueInput>
  }

  export type UserIssueJoinCreateNestedManyWithoutIssueInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutIssueInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutIssueInput>
    createMany?: UserIssueJoinCreateManyIssueInputEnvelope
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutIssueInput = {
    create?: XOR<Enumerable<SessionCreateWithoutIssueInput>, Enumerable<SessionUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutIssueInput>
    createMany?: SessionCreateManyIssueInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type TimerDataUncheckedCreateNestedManyWithoutIssueInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutIssueInput>, Enumerable<TimerDataUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutIssueInput>
    createMany?: TimerDataCreateManyIssueInputEnvelope
    connect?: Enumerable<TimerDataWhereUniqueInput>
  }

  export type UserIssueJoinUncheckedCreateNestedManyWithoutIssueInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutIssueInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutIssueInput>
    createMany?: UserIssueJoinCreateManyIssueInputEnvelope
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
  }

  export type SessionUpdateManyWithoutIssueNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutIssueInput>, Enumerable<SessionUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutIssueInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutIssueInput>
    createMany?: SessionCreateManyIssueInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutIssueInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutIssueInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type TimerDataUpdateManyWithoutIssueNestedInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutIssueInput>, Enumerable<TimerDataUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutIssueInput>
    upsert?: Enumerable<TimerDataUpsertWithWhereUniqueWithoutIssueInput>
    createMany?: TimerDataCreateManyIssueInputEnvelope
    set?: Enumerable<TimerDataWhereUniqueInput>
    disconnect?: Enumerable<TimerDataWhereUniqueInput>
    delete?: Enumerable<TimerDataWhereUniqueInput>
    connect?: Enumerable<TimerDataWhereUniqueInput>
    update?: Enumerable<TimerDataUpdateWithWhereUniqueWithoutIssueInput>
    updateMany?: Enumerable<TimerDataUpdateManyWithWhereWithoutIssueInput>
    deleteMany?: Enumerable<TimerDataScalarWhereInput>
  }

  export type UserIssueJoinUpdateManyWithoutIssueNestedInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutIssueInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutIssueInput>
    upsert?: Enumerable<UserIssueJoinUpsertWithWhereUniqueWithoutIssueInput>
    createMany?: UserIssueJoinCreateManyIssueInputEnvelope
    set?: Enumerable<UserIssueJoinWhereUniqueInput>
    disconnect?: Enumerable<UserIssueJoinWhereUniqueInput>
    delete?: Enumerable<UserIssueJoinWhereUniqueInput>
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
    update?: Enumerable<UserIssueJoinUpdateWithWhereUniqueWithoutIssueInput>
    updateMany?: Enumerable<UserIssueJoinUpdateManyWithWhereWithoutIssueInput>
    deleteMany?: Enumerable<UserIssueJoinScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutIssueNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutIssueInput>, Enumerable<SessionUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutIssueInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutIssueInput>
    createMany?: SessionCreateManyIssueInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutIssueInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutIssueInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type TimerDataUncheckedUpdateManyWithoutIssueNestedInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutIssueInput>, Enumerable<TimerDataUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutIssueInput>
    upsert?: Enumerable<TimerDataUpsertWithWhereUniqueWithoutIssueInput>
    createMany?: TimerDataCreateManyIssueInputEnvelope
    set?: Enumerable<TimerDataWhereUniqueInput>
    disconnect?: Enumerable<TimerDataWhereUniqueInput>
    delete?: Enumerable<TimerDataWhereUniqueInput>
    connect?: Enumerable<TimerDataWhereUniqueInput>
    update?: Enumerable<TimerDataUpdateWithWhereUniqueWithoutIssueInput>
    updateMany?: Enumerable<TimerDataUpdateManyWithWhereWithoutIssueInput>
    deleteMany?: Enumerable<TimerDataScalarWhereInput>
  }

  export type UserIssueJoinUncheckedUpdateManyWithoutIssueNestedInput = {
    create?: XOR<Enumerable<UserIssueJoinCreateWithoutIssueInput>, Enumerable<UserIssueJoinUncheckedCreateWithoutIssueInput>>
    connectOrCreate?: Enumerable<UserIssueJoinCreateOrConnectWithoutIssueInput>
    upsert?: Enumerable<UserIssueJoinUpsertWithWhereUniqueWithoutIssueInput>
    createMany?: UserIssueJoinCreateManyIssueInputEnvelope
    set?: Enumerable<UserIssueJoinWhereUniqueInput>
    disconnect?: Enumerable<UserIssueJoinWhereUniqueInput>
    delete?: Enumerable<UserIssueJoinWhereUniqueInput>
    connect?: Enumerable<UserIssueJoinWhereUniqueInput>
    update?: Enumerable<UserIssueJoinUpdateWithWhereUniqueWithoutIssueInput>
    updateMany?: Enumerable<UserIssueJoinUpdateManyWithWhereWithoutIssueInput>
    deleteMany?: Enumerable<UserIssueJoinScalarWhereInput>
  }

  export type SessionCreatedurationsInput = {
    set: Enumerable<number>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type IssueCreateNestedOneWithoutSessionsInput = {
    create?: XOR<IssueCreateWithoutSessionsInput, IssueUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: IssueCreateOrConnectWithoutSessionsInput
    connect?: IssueWhereUniqueInput
  }

  export type TimerDataCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutSessionInput>, Enumerable<TimerDataUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutSessionInput>
    createMany?: TimerDataCreateManySessionInputEnvelope
    connect?: Enumerable<TimerDataWhereUniqueInput>
  }

  export type TimerDataUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutSessionInput>, Enumerable<TimerDataUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutSessionInput>
    createMany?: TimerDataCreateManySessionInputEnvelope
    connect?: Enumerable<TimerDataWhereUniqueInput>
  }

  export type SessionUpdatedurationsInput = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type IssueUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<IssueCreateWithoutSessionsInput, IssueUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: IssueCreateOrConnectWithoutSessionsInput
    upsert?: IssueUpsertWithoutSessionsInput
    connect?: IssueWhereUniqueInput
    update?: XOR<XOR<IssueUpdateToOneWithWhereWithoutSessionsInput, IssueUpdateWithoutSessionsInput>, IssueUncheckedUpdateWithoutSessionsInput>
  }

  export type TimerDataUpdateManyWithoutSessionNestedInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutSessionInput>, Enumerable<TimerDataUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<TimerDataUpsertWithWhereUniqueWithoutSessionInput>
    createMany?: TimerDataCreateManySessionInputEnvelope
    set?: Enumerable<TimerDataWhereUniqueInput>
    disconnect?: Enumerable<TimerDataWhereUniqueInput>
    delete?: Enumerable<TimerDataWhereUniqueInput>
    connect?: Enumerable<TimerDataWhereUniqueInput>
    update?: Enumerable<TimerDataUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<TimerDataUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<TimerDataScalarWhereInput>
  }

  export type TimerDataUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<Enumerable<TimerDataCreateWithoutSessionInput>, Enumerable<TimerDataUncheckedCreateWithoutSessionInput>>
    connectOrCreate?: Enumerable<TimerDataCreateOrConnectWithoutSessionInput>
    upsert?: Enumerable<TimerDataUpsertWithWhereUniqueWithoutSessionInput>
    createMany?: TimerDataCreateManySessionInputEnvelope
    set?: Enumerable<TimerDataWhereUniqueInput>
    disconnect?: Enumerable<TimerDataWhereUniqueInput>
    delete?: Enumerable<TimerDataWhereUniqueInput>
    connect?: Enumerable<TimerDataWhereUniqueInput>
    update?: Enumerable<TimerDataUpdateWithWhereUniqueWithoutSessionInput>
    updateMany?: Enumerable<TimerDataUpdateManyWithWhereWithoutSessionInput>
    deleteMany?: Enumerable<TimerDataScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutTimerDataInput = {
    create?: XOR<UserCreateWithoutTimerDataInput, UserUncheckedCreateWithoutTimerDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimerDataInput
    connect?: UserWhereUniqueInput
  }

  export type IssueCreateNestedOneWithoutTimerDataInput = {
    create?: XOR<IssueCreateWithoutTimerDataInput, IssueUncheckedCreateWithoutTimerDataInput>
    connectOrCreate?: IssueCreateOrConnectWithoutTimerDataInput
    connect?: IssueWhereUniqueInput
  }

  export type SessionCreateNestedOneWithoutTimerDataInput = {
    create?: XOR<SessionCreateWithoutTimerDataInput, SessionUncheckedCreateWithoutTimerDataInput>
    connectOrCreate?: SessionCreateOrConnectWithoutTimerDataInput
    connect?: SessionWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type UserUpdateOneRequiredWithoutTimerDataNestedInput = {
    create?: XOR<UserCreateWithoutTimerDataInput, UserUncheckedCreateWithoutTimerDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimerDataInput
    upsert?: UserUpsertWithoutTimerDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimerDataInput, UserUpdateWithoutTimerDataInput>, UserUncheckedUpdateWithoutTimerDataInput>
  }

  export type IssueUpdateOneRequiredWithoutTimerDataNestedInput = {
    create?: XOR<IssueCreateWithoutTimerDataInput, IssueUncheckedCreateWithoutTimerDataInput>
    connectOrCreate?: IssueCreateOrConnectWithoutTimerDataInput
    upsert?: IssueUpsertWithoutTimerDataInput
    connect?: IssueWhereUniqueInput
    update?: XOR<XOR<IssueUpdateToOneWithWhereWithoutTimerDataInput, IssueUpdateWithoutTimerDataInput>, IssueUncheckedUpdateWithoutTimerDataInput>
  }

  export type SessionUpdateOneRequiredWithoutTimerDataNestedInput = {
    create?: XOR<SessionCreateWithoutTimerDataInput, SessionUncheckedCreateWithoutTimerDataInput>
    connectOrCreate?: SessionCreateOrConnectWithoutTimerDataInput
    upsert?: SessionUpsertWithoutTimerDataInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutTimerDataInput, SessionUpdateWithoutTimerDataInput>, SessionUncheckedUpdateWithoutTimerDataInput>
  }

  export type UserCreateNestedOneWithoutUserIssueJoinsInput = {
    create?: XOR<UserCreateWithoutUserIssueJoinsInput, UserUncheckedCreateWithoutUserIssueJoinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserIssueJoinsInput
    connect?: UserWhereUniqueInput
  }

  export type IssueCreateNestedOneWithoutUserIssueJoinsInput = {
    create?: XOR<IssueCreateWithoutUserIssueJoinsInput, IssueUncheckedCreateWithoutUserIssueJoinsInput>
    connectOrCreate?: IssueCreateOrConnectWithoutUserIssueJoinsInput
    connect?: IssueWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutUserIssueJoinsNestedInput = {
    create?: XOR<UserCreateWithoutUserIssueJoinsInput, UserUncheckedCreateWithoutUserIssueJoinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserIssueJoinsInput
    upsert?: UserUpsertWithoutUserIssueJoinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserIssueJoinsInput, UserUpdateWithoutUserIssueJoinsInput>, UserUncheckedUpdateWithoutUserIssueJoinsInput>
  }

  export type IssueUpdateOneRequiredWithoutUserIssueJoinsNestedInput = {
    create?: XOR<IssueCreateWithoutUserIssueJoinsInput, IssueUncheckedCreateWithoutUserIssueJoinsInput>
    connectOrCreate?: IssueCreateOrConnectWithoutUserIssueJoinsInput
    upsert?: IssueUpsertWithoutUserIssueJoinsInput
    connect?: IssueWhereUniqueInput
    update?: XOR<XOR<IssueUpdateToOneWithWhereWithoutUserIssueJoinsInput, IssueUpdateWithoutUserIssueJoinsInput>, IssueUncheckedUpdateWithoutUserIssueJoinsInput>
  }

  export type NestedStringFilter = {
    equals?: string | StringFieldRefInput
    in?: Enumerable<string> | ListStringFieldRefInput
    notIn?: Enumerable<string> | ListStringFieldRefInput
    lt?: string | StringFieldRefInput
    lte?: string | StringFieldRefInput
    gt?: string | StringFieldRefInput
    gte?: string | StringFieldRefInput
    contains?: string | StringFieldRefInput
    startsWith?: string | StringFieldRefInput
    endsWith?: string | StringFieldRefInput
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string | StringFieldRefInput
    in?: Enumerable<string> | ListStringFieldRefInput
    notIn?: Enumerable<string> | ListStringFieldRefInput
    lt?: string | StringFieldRefInput
    lte?: string | StringFieldRefInput
    gt?: string | StringFieldRefInput
    gte?: string | StringFieldRefInput
    contains?: string | StringFieldRefInput
    startsWith?: string | StringFieldRefInput
    endsWith?: string | StringFieldRefInput
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number | IntFieldRefInput
    in?: Enumerable<number> | ListIntFieldRefInput
    notIn?: Enumerable<number> | ListIntFieldRefInput
    lt?: number | IntFieldRefInput
    lte?: number | IntFieldRefInput
    gt?: number | IntFieldRefInput
    gte?: number | IntFieldRefInput
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string | DateTimeFieldRefInput
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | DateTimeFieldRefInput | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeNullableFilter | Date | string | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string | DateTimeFieldRefInput
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | DateTimeFieldRefInput | null
    in?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    notIn?: Enumerable<Date> | Enumerable<string> | ListDateTimeFieldRefInput | null
    lt?: Date | string | DateTimeFieldRefInput
    lte?: Date | string | DateTimeFieldRefInput
    gt?: Date | string | DateTimeFieldRefInput
    gte?: Date | string | DateTimeFieldRefInput
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | IntFieldRefInput | null
    in?: Enumerable<number> | ListIntFieldRefInput | null
    notIn?: Enumerable<number> | ListIntFieldRefInput | null
    lt?: number | IntFieldRefInput
    lte?: number | IntFieldRefInput
    gt?: number | IntFieldRefInput
    gte?: number | IntFieldRefInput
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number | IntFieldRefInput
    in?: Enumerable<number> | ListIntFieldRefInput
    notIn?: Enumerable<number> | ListIntFieldRefInput
    lt?: number | IntFieldRefInput
    lte?: number | IntFieldRefInput
    gt?: number | IntFieldRefInput
    gte?: number | IntFieldRefInput
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number | FloatFieldRefInput
    in?: Enumerable<number> | ListFloatFieldRefInput
    notIn?: Enumerable<number> | ListFloatFieldRefInput
    lt?: number | FloatFieldRefInput
    lte?: number | FloatFieldRefInput
    gt?: number | FloatFieldRefInput
    gte?: number | FloatFieldRefInput
    not?: NestedFloatFilter | number
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionName: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    issue: IssueCreateNestedOneWithoutSessionsInput
    timerData?: TimerDataCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionName: string
    issueId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    timerData?: TimerDataUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
  }

  export type TimerDataCreateWithoutUserInput = {
    id?: string
    startTime: Date | string
    stopTime?: Date | string | null
    issue: IssueCreateNestedOneWithoutTimerDataInput
    session: SessionCreateNestedOneWithoutTimerDataInput
  }

  export type TimerDataUncheckedCreateWithoutUserInput = {
    id?: string
    issueId: string
    sessionId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type TimerDataCreateOrConnectWithoutUserInput = {
    where: TimerDataWhereUniqueInput
    create: XOR<TimerDataCreateWithoutUserInput, TimerDataUncheckedCreateWithoutUserInput>
  }

  export type TimerDataCreateManyUserInputEnvelope = {
    data: Enumerable<TimerDataCreateManyUserInput>
  }

  export type UserIssueJoinCreateWithoutUserInput = {
    id?: string
    totalDuration: number
    issue: IssueCreateNestedOneWithoutUserIssueJoinsInput
  }

  export type UserIssueJoinUncheckedCreateWithoutUserInput = {
    id?: string
    issueName: string
    totalDuration: number
  }

  export type UserIssueJoinCreateOrConnectWithoutUserInput = {
    where: UserIssueJoinWhereUniqueInput
    create: XOR<UserIssueJoinCreateWithoutUserInput, UserIssueJoinUncheckedCreateWithoutUserInput>
  }

  export type UserIssueJoinCreateManyUserInputEnvelope = {
    data: Enumerable<UserIssueJoinCreateManyUserInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionName?: StringFilter | string
    userId?: StringFilter | string
    issueId?: StringFilter | string
    durations?: IntNullableListFilter
  }

  export type TimerDataUpsertWithWhereUniqueWithoutUserInput = {
    where: TimerDataWhereUniqueInput
    update: XOR<TimerDataUpdateWithoutUserInput, TimerDataUncheckedUpdateWithoutUserInput>
    create: XOR<TimerDataCreateWithoutUserInput, TimerDataUncheckedCreateWithoutUserInput>
  }

  export type TimerDataUpdateWithWhereUniqueWithoutUserInput = {
    where: TimerDataWhereUniqueInput
    data: XOR<TimerDataUpdateWithoutUserInput, TimerDataUncheckedUpdateWithoutUserInput>
  }

  export type TimerDataUpdateManyWithWhereWithoutUserInput = {
    where: TimerDataScalarWhereInput
    data: XOR<TimerDataUpdateManyMutationInput, TimerDataUncheckedUpdateManyWithoutUserInput>
  }

  export type TimerDataScalarWhereInput = {
    AND?: Enumerable<TimerDataScalarWhereInput>
    OR?: Enumerable<TimerDataScalarWhereInput>
    NOT?: Enumerable<TimerDataScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    issueId?: StringFilter | string
    sessionId?: StringFilter | string
    startTime?: DateTimeFilter | Date | string
    stopTime?: DateTimeNullableFilter | Date | string | null
  }

  export type UserIssueJoinUpsertWithWhereUniqueWithoutUserInput = {
    where: UserIssueJoinWhereUniqueInput
    update: XOR<UserIssueJoinUpdateWithoutUserInput, UserIssueJoinUncheckedUpdateWithoutUserInput>
    create: XOR<UserIssueJoinCreateWithoutUserInput, UserIssueJoinUncheckedCreateWithoutUserInput>
  }

  export type UserIssueJoinUpdateWithWhereUniqueWithoutUserInput = {
    where: UserIssueJoinWhereUniqueInput
    data: XOR<UserIssueJoinUpdateWithoutUserInput, UserIssueJoinUncheckedUpdateWithoutUserInput>
  }

  export type UserIssueJoinUpdateManyWithWhereWithoutUserInput = {
    where: UserIssueJoinScalarWhereInput
    data: XOR<UserIssueJoinUpdateManyMutationInput, UserIssueJoinUncheckedUpdateManyWithoutUserInput>
  }

  export type UserIssueJoinScalarWhereInput = {
    AND?: Enumerable<UserIssueJoinScalarWhereInput>
    OR?: Enumerable<UserIssueJoinScalarWhereInput>
    NOT?: Enumerable<UserIssueJoinScalarWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    issueName?: StringFilter | string
    totalDuration?: IntFilter | number
  }

  export type SessionCreateWithoutIssueInput = {
    id?: string
    sessionName: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    user: UserCreateNestedOneWithoutSessionsInput
    timerData?: TimerDataCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutIssueInput = {
    id?: string
    sessionName: string
    userId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    timerData?: TimerDataUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutIssueInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutIssueInput, SessionUncheckedCreateWithoutIssueInput>
  }

  export type SessionCreateManyIssueInputEnvelope = {
    data: Enumerable<SessionCreateManyIssueInput>
  }

  export type TimerDataCreateWithoutIssueInput = {
    id?: string
    startTime: Date | string
    stopTime?: Date | string | null
    user: UserCreateNestedOneWithoutTimerDataInput
    session: SessionCreateNestedOneWithoutTimerDataInput
  }

  export type TimerDataUncheckedCreateWithoutIssueInput = {
    id?: string
    userId: string
    sessionId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type TimerDataCreateOrConnectWithoutIssueInput = {
    where: TimerDataWhereUniqueInput
    create: XOR<TimerDataCreateWithoutIssueInput, TimerDataUncheckedCreateWithoutIssueInput>
  }

  export type TimerDataCreateManyIssueInputEnvelope = {
    data: Enumerable<TimerDataCreateManyIssueInput>
  }

  export type UserIssueJoinCreateWithoutIssueInput = {
    id?: string
    totalDuration: number
    user: UserCreateNestedOneWithoutUserIssueJoinsInput
  }

  export type UserIssueJoinUncheckedCreateWithoutIssueInput = {
    id?: string
    username: string
    totalDuration: number
  }

  export type UserIssueJoinCreateOrConnectWithoutIssueInput = {
    where: UserIssueJoinWhereUniqueInput
    create: XOR<UserIssueJoinCreateWithoutIssueInput, UserIssueJoinUncheckedCreateWithoutIssueInput>
  }

  export type UserIssueJoinCreateManyIssueInputEnvelope = {
    data: Enumerable<UserIssueJoinCreateManyIssueInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutIssueInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutIssueInput, SessionUncheckedUpdateWithoutIssueInput>
    create: XOR<SessionCreateWithoutIssueInput, SessionUncheckedCreateWithoutIssueInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutIssueInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutIssueInput, SessionUncheckedUpdateWithoutIssueInput>
  }

  export type SessionUpdateManyWithWhereWithoutIssueInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutIssueInput>
  }

  export type TimerDataUpsertWithWhereUniqueWithoutIssueInput = {
    where: TimerDataWhereUniqueInput
    update: XOR<TimerDataUpdateWithoutIssueInput, TimerDataUncheckedUpdateWithoutIssueInput>
    create: XOR<TimerDataCreateWithoutIssueInput, TimerDataUncheckedCreateWithoutIssueInput>
  }

  export type TimerDataUpdateWithWhereUniqueWithoutIssueInput = {
    where: TimerDataWhereUniqueInput
    data: XOR<TimerDataUpdateWithoutIssueInput, TimerDataUncheckedUpdateWithoutIssueInput>
  }

  export type TimerDataUpdateManyWithWhereWithoutIssueInput = {
    where: TimerDataScalarWhereInput
    data: XOR<TimerDataUpdateManyMutationInput, TimerDataUncheckedUpdateManyWithoutIssueInput>
  }

  export type UserIssueJoinUpsertWithWhereUniqueWithoutIssueInput = {
    where: UserIssueJoinWhereUniqueInput
    update: XOR<UserIssueJoinUpdateWithoutIssueInput, UserIssueJoinUncheckedUpdateWithoutIssueInput>
    create: XOR<UserIssueJoinCreateWithoutIssueInput, UserIssueJoinUncheckedCreateWithoutIssueInput>
  }

  export type UserIssueJoinUpdateWithWhereUniqueWithoutIssueInput = {
    where: UserIssueJoinWhereUniqueInput
    data: XOR<UserIssueJoinUpdateWithoutIssueInput, UserIssueJoinUncheckedUpdateWithoutIssueInput>
  }

  export type UserIssueJoinUpdateManyWithWhereWithoutIssueInput = {
    where: UserIssueJoinScalarWhereInput
    data: XOR<UserIssueJoinUpdateManyMutationInput, UserIssueJoinUncheckedUpdateManyWithoutIssueInput>
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    username: string
    timerData?: TimerDataCreateNestedManyWithoutUserInput
    userIssueJoins?: UserIssueJoinCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    username: string
    timerData?: TimerDataUncheckedCreateNestedManyWithoutUserInput
    userIssueJoins?: UserIssueJoinUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type IssueCreateWithoutSessionsInput = {
    id?: string
    issueName: string
    timerData?: TimerDataCreateNestedManyWithoutIssueInput
    userIssueJoins?: UserIssueJoinCreateNestedManyWithoutIssueInput
  }

  export type IssueUncheckedCreateWithoutSessionsInput = {
    id?: string
    issueName: string
    timerData?: TimerDataUncheckedCreateNestedManyWithoutIssueInput
    userIssueJoins?: UserIssueJoinUncheckedCreateNestedManyWithoutIssueInput
  }

  export type IssueCreateOrConnectWithoutSessionsInput = {
    where: IssueWhereUniqueInput
    create: XOR<IssueCreateWithoutSessionsInput, IssueUncheckedCreateWithoutSessionsInput>
  }

  export type TimerDataCreateWithoutSessionInput = {
    id?: string
    startTime: Date | string
    stopTime?: Date | string | null
    user: UserCreateNestedOneWithoutTimerDataInput
    issue: IssueCreateNestedOneWithoutTimerDataInput
  }

  export type TimerDataUncheckedCreateWithoutSessionInput = {
    id?: string
    userId: string
    issueId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type TimerDataCreateOrConnectWithoutSessionInput = {
    where: TimerDataWhereUniqueInput
    create: XOR<TimerDataCreateWithoutSessionInput, TimerDataUncheckedCreateWithoutSessionInput>
  }

  export type TimerDataCreateManySessionInputEnvelope = {
    data: Enumerable<TimerDataCreateManySessionInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    timerData?: TimerDataUpdateManyWithoutUserNestedInput
    userIssueJoins?: UserIssueJoinUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    timerData?: TimerDataUncheckedUpdateManyWithoutUserNestedInput
    userIssueJoins?: UserIssueJoinUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IssueUpsertWithoutSessionsInput = {
    update: XOR<IssueUpdateWithoutSessionsInput, IssueUncheckedUpdateWithoutSessionsInput>
    create: XOR<IssueCreateWithoutSessionsInput, IssueUncheckedCreateWithoutSessionsInput>
    where?: IssueWhereInput
  }

  export type IssueUpdateToOneWithWhereWithoutSessionsInput = {
    where?: IssueWhereInput
    data: XOR<IssueUpdateWithoutSessionsInput, IssueUncheckedUpdateWithoutSessionsInput>
  }

  export type IssueUpdateWithoutSessionsInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    timerData?: TimerDataUpdateManyWithoutIssueNestedInput
    userIssueJoins?: UserIssueJoinUpdateManyWithoutIssueNestedInput
  }

  export type IssueUncheckedUpdateWithoutSessionsInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    timerData?: TimerDataUncheckedUpdateManyWithoutIssueNestedInput
    userIssueJoins?: UserIssueJoinUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type TimerDataUpsertWithWhereUniqueWithoutSessionInput = {
    where: TimerDataWhereUniqueInput
    update: XOR<TimerDataUpdateWithoutSessionInput, TimerDataUncheckedUpdateWithoutSessionInput>
    create: XOR<TimerDataCreateWithoutSessionInput, TimerDataUncheckedCreateWithoutSessionInput>
  }

  export type TimerDataUpdateWithWhereUniqueWithoutSessionInput = {
    where: TimerDataWhereUniqueInput
    data: XOR<TimerDataUpdateWithoutSessionInput, TimerDataUncheckedUpdateWithoutSessionInput>
  }

  export type TimerDataUpdateManyWithWhereWithoutSessionInput = {
    where: TimerDataScalarWhereInput
    data: XOR<TimerDataUpdateManyMutationInput, TimerDataUncheckedUpdateManyWithoutSessionInput>
  }

  export type UserCreateWithoutTimerDataInput = {
    id?: string
    username: string
    sessions?: SessionCreateNestedManyWithoutUserInput
    userIssueJoins?: UserIssueJoinCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTimerDataInput = {
    id?: string
    username: string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userIssueJoins?: UserIssueJoinUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTimerDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimerDataInput, UserUncheckedCreateWithoutTimerDataInput>
  }

  export type IssueCreateWithoutTimerDataInput = {
    id?: string
    issueName: string
    sessions?: SessionCreateNestedManyWithoutIssueInput
    userIssueJoins?: UserIssueJoinCreateNestedManyWithoutIssueInput
  }

  export type IssueUncheckedCreateWithoutTimerDataInput = {
    id?: string
    issueName: string
    sessions?: SessionUncheckedCreateNestedManyWithoutIssueInput
    userIssueJoins?: UserIssueJoinUncheckedCreateNestedManyWithoutIssueInput
  }

  export type IssueCreateOrConnectWithoutTimerDataInput = {
    where: IssueWhereUniqueInput
    create: XOR<IssueCreateWithoutTimerDataInput, IssueUncheckedCreateWithoutTimerDataInput>
  }

  export type SessionCreateWithoutTimerDataInput = {
    id?: string
    sessionName: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
    user: UserCreateNestedOneWithoutSessionsInput
    issue: IssueCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutTimerDataInput = {
    id?: string
    sessionName: string
    userId: string
    issueId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
  }

  export type SessionCreateOrConnectWithoutTimerDataInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutTimerDataInput, SessionUncheckedCreateWithoutTimerDataInput>
  }

  export type UserUpsertWithoutTimerDataInput = {
    update: XOR<UserUpdateWithoutTimerDataInput, UserUncheckedUpdateWithoutTimerDataInput>
    create: XOR<UserCreateWithoutTimerDataInput, UserUncheckedCreateWithoutTimerDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimerDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimerDataInput, UserUncheckedUpdateWithoutTimerDataInput>
  }

  export type UserUpdateWithoutTimerDataInput = {
    username?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userIssueJoins?: UserIssueJoinUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTimerDataInput = {
    username?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userIssueJoins?: UserIssueJoinUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IssueUpsertWithoutTimerDataInput = {
    update: XOR<IssueUpdateWithoutTimerDataInput, IssueUncheckedUpdateWithoutTimerDataInput>
    create: XOR<IssueCreateWithoutTimerDataInput, IssueUncheckedCreateWithoutTimerDataInput>
    where?: IssueWhereInput
  }

  export type IssueUpdateToOneWithWhereWithoutTimerDataInput = {
    where?: IssueWhereInput
    data: XOR<IssueUpdateWithoutTimerDataInput, IssueUncheckedUpdateWithoutTimerDataInput>
  }

  export type IssueUpdateWithoutTimerDataInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutIssueNestedInput
    userIssueJoins?: UserIssueJoinUpdateManyWithoutIssueNestedInput
  }

  export type IssueUncheckedUpdateWithoutTimerDataInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutIssueNestedInput
    userIssueJoins?: UserIssueJoinUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type SessionUpsertWithoutTimerDataInput = {
    update: XOR<SessionUpdateWithoutTimerDataInput, SessionUncheckedUpdateWithoutTimerDataInput>
    create: XOR<SessionCreateWithoutTimerDataInput, SessionUncheckedCreateWithoutTimerDataInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutTimerDataInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutTimerDataInput, SessionUncheckedUpdateWithoutTimerDataInput>
  }

  export type SessionUpdateWithoutTimerDataInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    issue?: IssueUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutTimerDataInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
  }

  export type UserCreateWithoutUserIssueJoinsInput = {
    id?: string
    username: string
    sessions?: SessionCreateNestedManyWithoutUserInput
    timerData?: TimerDataCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserIssueJoinsInput = {
    id?: string
    username: string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    timerData?: TimerDataUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserIssueJoinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserIssueJoinsInput, UserUncheckedCreateWithoutUserIssueJoinsInput>
  }

  export type IssueCreateWithoutUserIssueJoinsInput = {
    id?: string
    issueName: string
    sessions?: SessionCreateNestedManyWithoutIssueInput
    timerData?: TimerDataCreateNestedManyWithoutIssueInput
  }

  export type IssueUncheckedCreateWithoutUserIssueJoinsInput = {
    id?: string
    issueName: string
    sessions?: SessionUncheckedCreateNestedManyWithoutIssueInput
    timerData?: TimerDataUncheckedCreateNestedManyWithoutIssueInput
  }

  export type IssueCreateOrConnectWithoutUserIssueJoinsInput = {
    where: IssueWhereUniqueInput
    create: XOR<IssueCreateWithoutUserIssueJoinsInput, IssueUncheckedCreateWithoutUserIssueJoinsInput>
  }

  export type UserUpsertWithoutUserIssueJoinsInput = {
    update: XOR<UserUpdateWithoutUserIssueJoinsInput, UserUncheckedUpdateWithoutUserIssueJoinsInput>
    create: XOR<UserCreateWithoutUserIssueJoinsInput, UserUncheckedCreateWithoutUserIssueJoinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserIssueJoinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserIssueJoinsInput, UserUncheckedUpdateWithoutUserIssueJoinsInput>
  }

  export type UserUpdateWithoutUserIssueJoinsInput = {
    username?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    timerData?: TimerDataUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserIssueJoinsInput = {
    username?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    timerData?: TimerDataUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IssueUpsertWithoutUserIssueJoinsInput = {
    update: XOR<IssueUpdateWithoutUserIssueJoinsInput, IssueUncheckedUpdateWithoutUserIssueJoinsInput>
    create: XOR<IssueCreateWithoutUserIssueJoinsInput, IssueUncheckedCreateWithoutUserIssueJoinsInput>
    where?: IssueWhereInput
  }

  export type IssueUpdateToOneWithWhereWithoutUserIssueJoinsInput = {
    where?: IssueWhereInput
    data: XOR<IssueUpdateWithoutUserIssueJoinsInput, IssueUncheckedUpdateWithoutUserIssueJoinsInput>
  }

  export type IssueUpdateWithoutUserIssueJoinsInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutIssueNestedInput
    timerData?: TimerDataUpdateManyWithoutIssueNestedInput
  }

  export type IssueUncheckedUpdateWithoutUserIssueJoinsInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutIssueNestedInput
    timerData?: TimerDataUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionName: string
    issueId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
  }

  export type TimerDataCreateManyUserInput = {
    id?: string
    issueId: string
    sessionId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type UserIssueJoinCreateManyUserInput = {
    id?: string
    issueName: string
    totalDuration: number
  }

  export type SessionUpdateWithoutUserInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    issue?: IssueUpdateOneRequiredWithoutSessionsNestedInput
    timerData?: TimerDataUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    timerData?: TimerDataUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
  }

  export type TimerDataUpdateWithoutUserInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issue?: IssueUpdateOneRequiredWithoutTimerDataNestedInput
    session?: SessionUpdateOneRequiredWithoutTimerDataNestedInput
  }

  export type TimerDataUncheckedUpdateWithoutUserInput = {
    issueId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TimerDataUncheckedUpdateManyWithoutUserInput = {
    issueId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserIssueJoinUpdateWithoutUserInput = {
    totalDuration?: IntFieldUpdateOperationsInput | number
    issue?: IssueUpdateOneRequiredWithoutUserIssueJoinsNestedInput
  }

  export type UserIssueJoinUncheckedUpdateWithoutUserInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type UserIssueJoinUncheckedUpdateManyWithoutUserInput = {
    issueName?: StringFieldUpdateOperationsInput | string
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateManyIssueInput = {
    id?: string
    sessionName: string
    userId: string
    durations?: SessionCreatedurationsInput | Enumerable<number>
  }

  export type TimerDataCreateManyIssueInput = {
    id?: string
    userId: string
    sessionId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type UserIssueJoinCreateManyIssueInput = {
    id?: string
    username: string
    totalDuration: number
  }

  export type SessionUpdateWithoutIssueInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    timerData?: TimerDataUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutIssueInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
    timerData?: TimerDataUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutIssueInput = {
    sessionName?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    durations?: SessionUpdatedurationsInput | Enumerable<number>
  }

  export type TimerDataUpdateWithoutIssueInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTimerDataNestedInput
    session?: SessionUpdateOneRequiredWithoutTimerDataNestedInput
  }

  export type TimerDataUncheckedUpdateWithoutIssueInput = {
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TimerDataUncheckedUpdateManyWithoutIssueInput = {
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserIssueJoinUpdateWithoutIssueInput = {
    totalDuration?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserIssueJoinsNestedInput
  }

  export type UserIssueJoinUncheckedUpdateWithoutIssueInput = {
    username?: StringFieldUpdateOperationsInput | string
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type UserIssueJoinUncheckedUpdateManyWithoutIssueInput = {
    username?: StringFieldUpdateOperationsInput | string
    totalDuration?: IntFieldUpdateOperationsInput | number
  }

  export type TimerDataCreateManySessionInput = {
    id?: string
    userId: string
    issueId: string
    startTime: Date | string
    stopTime?: Date | string | null
  }

  export type TimerDataUpdateWithoutSessionInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTimerDataNestedInput
    issue?: IssueUpdateOneRequiredWithoutTimerDataNestedInput
  }

  export type TimerDataUncheckedUpdateWithoutSessionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TimerDataUncheckedUpdateManyWithoutSessionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    issueId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stopTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}